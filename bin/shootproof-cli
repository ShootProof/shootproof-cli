#!/usr/bin/env php
<?php
/**
 * This file is part of the ShootProof command line tool.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @copyright Copyright (c) ShootProof, LLC (https://www.shootproof.com)
 * @license http://opensource.org/licenses/MIT MIT
 */

if (PHP_SAPI !== 'cli') {
    echo 'Warning: shootproof-cli should be invoked via the CLI version of PHP, not the '
        . PHP_SAPI . ' SAPI' . PHP_EOL;
}

set_time_limit(0);
date_default_timezone_set('UTC');

require_once __DIR__ . '/../src/bootstrap.php';

$config = require __DIR__ . '/config.php';

use Aura\Cli\Status;
use Aura\Di\Container;
use Aura\Di\Factory as ContainerFactory;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\BufferHandler;
use Monolog\Handler\NativeMailerHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use ShootProof\Cli\ErrorHandler;
use ShootProof\Cli\Options;
use ShootProof\Cli\Utility\OptionTransformer;
use ShootProof\Cli\Validators\ValidatorException;

// Set up the dependency injection container; we do it manually here instead of
// using the ContainerBuilder to prevent calling Container::lock()
$di = new Container(new ContainerFactory());
$di->newInstance('Aura\Cli\_Config\Common')->define($di);

// Parse the command line
$context = $di->newInstance('Aura\Cli\Context');
$getopt = $context->getopt(array_keys($config['options']));

// Set up the options container
$optionsFactory = $di->newInstance('ShootProof\Cli\OptionsFactory');
$options = $optionsFactory->newInstance(array_keys($config['options']), $config['validators'], $config['defaults']);

// Set the timezone
date_default_timezone_set($options->timezone);

// Configure Monolog
$logger = new Logger($config['monologChannel']);

// custom line format, allow line breaks, ignore empty context
$formatter = new LineFormatter($config['monologFormat'], null, true, true);

$handler = new StreamHandler("php://stdout", $config['monologVerbosity'][$options->verbosity]);
$handler->setFormatter($formatter);
$logger->pushHandler($handler); // log to screen

// Send an email report when the script ends
if ($options->email) {
    $handler = new NativeMailerHandler($options->email, $options->emailSubject, $options->emailFrom, Logger::NOTICE);
    $handler->setFormatter($formatter);
    $logger->pushHandler(new BufferHandler($handler));
}

// Use Monolog as the error handler
ErrorHandler::register($logger);

// Misc. debug messages
$logger->addDebug('Timezone set', [$options->timezone]);
if ($optionsFactory->getLastError()) {
    $logger->addDebug('Config file not found', [$options->config]);
} else {
    $logger->addDebug('Config file found', [$options->config]);
}
if ($options->email) {
    $logger->addDebug('Will send email report', [
        'to' => $options->email,
        'from' => $options->emailFrom,
        'subject' => $options->emailSubject,
    ]);
}

// Configure the ShootProof API client
$api = new Sp_Api($options->accessToken);

// Finish configuring the DI container, and lock it
$di->set('Logger', $logger);
$di->set('ShootproofApi', $api);
$di->newInstance('ShootProof\Cli\DependencyConfig')->define($di);
$di->lock();

// Configure the Help writer
$help = $di->get('Aura\Cli\Help');
$help->setSummary($config['summary']);
$help->setUsage($config['usage']);
$help->setDescr($config['description']);
$help->setOptions($config['options']);

// Dispatch command
$commandName = $getopt->get(1);
if ($commandName === 'help') {
    $helpCommand = $di->get($commandName);

    // handle help subcommands
    $subCommandName = $getopt->get(2);
    if ($subCommandName) {
        if ($di->has($subCommandName)) {
            // Show subcommand help
            $subCommand = $di->get($subCommandName);
            $helpCommand($help, $subCommand);
            exit(Status::SUCCESS);
        } else {
            // Invalid subcommand; show help command help
            $helpCommand($help, $helpCommand);
            exit(Status::USAGE);
        }
    } else {
        // No subcommand
        $helpCommand($help, $helpCommand);
        exit(Status::SUCCESS);
    }
} elseif ($di->has($commandName)) {
    $logger->addNotice('Executing command', [$commandName]);

    // Each command has its own set of options, but will need the general options too, so
    // we inject the base config which will be extended with the command's own config
    $optionsFactory->setBaseConfig(
        array_keys($config['options']),
        $config['validators'],
        $config['defaults']
    );

    $command = $di->get($commandName);
    $command($context, $optionsFactory);
    exit(Status::SUCCESS);
} else {
    // No command, show main help
    $di->get('help')->__invoke($help);
    exit(Status::NOINPUT);
}
